import asyncio
import sqlite3
import logging
from time import sleep
import os
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.utils.exceptions import Throttled
from aiogram.utils.exceptions import Unauthorized 
from aiogram import types
from aiogram.types import InputFile
from config import *
from random import *
import db1
import blacklist 

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
ADMIN=admin_id

conn = sqlite3.connect('db2.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
   user_id INTEGER,
   block INTEGER);
""")
conn.commit()


class dialog(StatesGroup):
    spam = State()
    blacklist = State()
    whitelist = State()


kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
kb.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
kb.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
kb.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))

class Mydialog(StatesGroup):
    otvet = State()


class Mydialog1(StatesGroup):
    otvet1 = State()


class Mydialog2(StatesGroup):
    otvet2 = State()

my_channel_id=sub_channel_id
channel_us=sub_channel_url
#–µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –º–µ–Ω—å—à–µ –∏–ª–∏ –±–æ–ª—å—à–µ –∫–∞–Ω–∞–ª–æ–≤ —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ

def no_sub():
    urlkb = InlineKeyboardMarkup(row_width=1)
    urlButton = InlineKeyboardButton(text='Welat VPN', url=channel_us)
    urlkb.add(urlButton)
    return urlkb

async def ch_sub(sid):
    statuss = ['creator', 'administrator', 'member']
    x = await bot.get_chat_member(my_channel_id, sid)
    if x.status in statuss:
        return(1)
    else:
        await bot.send_message(sid, "üó®Ô∏è | –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", reply_markup=no_sub())


@dp.message_handler(commands="start")
async def start(message: types.Message):
    cur = conn.cursor()
    cur.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = cur.fetchone()
    if message.from_user.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=keyboard)
    else:
        if result is None:
            cur = conn.cursor()
            cur.execute(f'''SELECT * FROM users WHERE (user_id="{message.from_user.id}")''')
            entry = cur.fetchone()
            if entry is None:
                cur.execute(f'''INSERT INTO users VALUES ('{message.from_user.id}', '0')''')
            conn.commit()
            try:
                pon = db1.get_zaya(message.chat.id)
                if pon == None:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="üõ°Ô∏è | VPN", callback_data="zaya"))
                    keyboard.add(types.InlineKeyboardButton(text="üî∫ | –¢–µ—Ö. –ø–æ–º–æ—â—å", url="t.me/welat_vpn_collaborator"))
                    keyboard.add(types.InlineKeyboardButton(text="üìò | –û—Ç–∑—ã–≤—ã", url="t.me/welat_vpn_reviews"))
                    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n –ú—ã –∫–æ–º–ø–∞–Ω–∏—è Welat VPN", reply_markup=keyboard)
                else:
                    keyboard = types.InlineKeyboardMarkup()
                    keyboard.add(types.InlineKeyboardButton(text="üõ°Ô∏è | –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="zaya"))
                    await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!', reply_markup=keyboard)

            except:
                db1.add_user(message.chat.id)
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(types.InlineKeyboardButton(text="üõ°Ô∏è | VPN", callback_data="zaya"))
                keyboard.add(types.InlineKeyboardButton(text="üî∫ | –¢–µ—Ö. –ø–æ–º–æ—â—å", url="t.me/welat_vpn_collaborator"))
                keyboard.add(types.InlineKeyboardButton(text="üìò | –û—Ç–∑—ã–≤—ã", url="t.me/welat_vpn_reviews"))
                await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n –ú—ã –∫–æ–º–ø–∞–Ω–∏—è Welat VPN", reply_markup=keyboard)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(text="üõ°Ô∏è | VPN", callback_data="zaya"))
            keyboard.add(types.InlineKeyboardButton(text="üî∫ | –¢–µ—Ö. –ø–æ–º–æ—â—å", url="t.me/welat_vpn_collaborator"))
            keyboard.add(types.InlineKeyboardButton(text="üìò | –û—Ç–∑—ã–≤—ã", url="t.me/welat_vpn_reviews"))
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n –ú—ã –∫–æ–º–ø–∞–Ω–∏—è Welat VPN", reply_markup=keyboard)


@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: types.Message):
    if message.from_user.id == ADMIN:
        await dialog.spam.set()
        await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')


@dp.message_handler(state=dialog.spam)
async def start_spam(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
        await state.finish()
    else:
        cur = conn.cursor()
        cur.execute(f'''SELECT user_id FROM users''')
        spam_base = cur.fetchall()
        print(spam_base)
        for z in range(len(spam_base)):
            print(spam_base[z][0])
        for z in range(len(spam_base)):
            try:
                await bot.send_message(spam_base[z][0], message.text)
            except BaseException as ex:
                print(f"{type(ex).__name__}: {ex}")
                await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                await state.finish()


@dp.message_handler(state='*', text='–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    if message.from_user.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
    else:
        await message.answer('–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è')

@dp.message_handler(content_types=['text'], text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def hfandler(message: types.Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute('''select * from users''')
    results = cur.fetchall()
    await message.answer(f'–õ—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞ –ª–∏–±–æ –∑–∞—Ö–æ–¥–∏–ª–∏ –≤ –±–æ—Ç–∞: {len(results)}')

#@dp.callback_query_handler(text="stoimost")
#async def stoimost(call: types.CallbackQuery):
    #keyboard = types.InlineKeyboardMarkup()
    #keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="zaya"))
    #await call.message.answer(f'–°—Ç–æ–∏–º–æ—Å—Ç—å:n\ 1 –º–µ—Å—è—Ü (3$)n\3 –º–µ—Å—è—Ü–∞ (9$)n\6 –º–µ—Å—è—Ü–µ–≤(18$)n\1 –≥–æ–¥ (30$)', reply_markup=keyboard)


@dp.callback_query_handler(text="zaya")
async def send_start(call: types.CallbackQuery):
    kb = [
        [
            types.KeyboardButton(text="1 –º–µ—Å."),
            types.KeyboardButton(text="3 –º–µ—Å."),
            types.KeyboardButton(text="6 –º–µ—Å."),
            types.KeyboardButton(text="1 –≥–æ–¥"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫..."
    )
    await call.message.answer(f'<b>‚åõ | –í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫:</b> \n\n üí° | –°—Ç–æ–∏–º–æ—Å—Ç—å: \n 1 –º–µ—Å—è—Ü (3$) \n 3 –º–µ—Å—è—Ü–∞ (9$) \n 6 –º–µ—Å—è—Ü–µ–≤(18$) \n 1 –≥–æ–¥ (30$)', reply_markup=keyboard, parse_mode="html")
    await Mydialog.otvet.set()


@dp.message_handler(state=Mydialog.otvet)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = data['text']
        db1.add_text1(user_message, message.chat.id)
        await state.finish()

    await message.reply('‚úâÔ∏è | –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:', reply_markup=types.ReplyKeyboardRemove())
    await Mydialog1.otvet1.set()


@dp.message_handler(state=Mydialog1.otvet1)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data1:
        data1['text'] = message.text
        user_message1 = data1['text']
        db1.add_text2(db1.get_text1(message.chat.id), user_message1, message.chat.id)
        await state.finish()
        await Mydialog2.otvet2.set()
        await message.reply('üì® | –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. ')
        await state.finish()
    user_id = int(message.from_user.id)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    but1 = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"prin_{message.from_user.id}")
    but2 = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"otkl_{message.from_user.id}")

    keyboard.add(but1, but2)
    await bot.send_message(chat_id=admin_user_id,
                           text=f'<a href="tg://user?id={message.chat.id}">{message.from_user.first_name}</a> –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –ï–≥–æ –¥–∞–Ω–Ω—ã–µ:\n–°—Ä–æ–∫ - {db1.get_text1(message.chat.id)}\n–ü–æ—á—Ç–∞ - {db1.get_text2(message.chat.id)}',
                           parse_mode='HTML', reply_markup=keyboard)

    @dp.callback_query_handler(text_startswith=f"prin_{message.from_user.id}")
    async def send_prin(call: types.CallbackQuery):
        db1.add_confirm(db1.get_text1(message.chat.id), db1.get_text2(message.chat.id), user_message1, user_id, 1)
        await bot.send_message(chat_id=user_id, text="‚úÖ | –í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await call.message.edit_text("–°–æ–æ–±—â–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞")

    @dp.callback_query_handler(text_startswith=f"otkl_{message.from_user.id}")
    async def send_otkl(call: types.CallbackQuery):
        user_id = int(call.data.split("_")[1])
        db1.add_confirm(db1.get_text1(message.chat.id), db1.get_text2(message.chat.id), user_message1, user_id, 2)
        await bot.send_message(chat_id=user_id, text="üö´ | –í–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–º–µ–Ω–∏–ª–∏")
        await call.message.edit_text("–°–æ–æ–±—â–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞")

@dp.message_handler(user_id=banned_users)
async def handle_banned(msg: Message):
    await bot.send_message(chat_id=

@dp.message_handler(content_types=['text'], text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°')
async def handle_ban_command(msg: Message):
    if message.from_user.id == ADMIN:
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        abuser_id = int(msg.get_args())
    except (ValueError, TypeError):
        return await msg.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    banned_users.add(abuser_id)
    await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.message_handler(content_types=['text'], text='–£–±—Ä–∞—Ç—å –∏–∑ –ß–°')
async def handle_ban_command(msg: Message):
    if message.from_user.id == ADMIN:
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        abuser_id = int(msg.get_args())
    except (ValueError, TypeError):
        return await msg.reply("–£–∫–∞–∂–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    banned_users.remove(abuser_id)
    await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {abuser_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
